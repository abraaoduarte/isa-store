generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email String  @unique
  name String
  password String
  is_active Boolean? @default(false)
  product Product[]
  productVariation ProductVariation[]
  ledger Ledger[]
  sellOrder SellOrder[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("users")
}

model Brand {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String
  description String?
  image String?
  product Product[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("brands")
}

enum SizeType {
  NUMERIC
  LETTER
}

model Size {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  size String
  description String?
  type SizeType
  productVariation ProductVariation[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("sizes")
}

model Color {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String
  productVariation ProductVariation[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("colors")
}

model ProductCategory {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String
  description String?
  product Product[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("product_categories")
}

model Product {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String
  slug String @unique
  description String
  banner String
  is_active Boolean
  discountable Boolean
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid
  brand Brand @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  brand_id String @db.Uuid
  productCategory ProductCategory @relation(fields: [product_category_id], references: [id], onDelete: Cascade)
  product_category_id String @db.Uuid
  productVariation ProductVariation[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("products")
}

model ProductVariation {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  inventory_quantity Int
  price Int
  sku String
  is_active Boolean
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String @db.Uuid
  size Size @relation(fields: [size_id], references: [id], onDelete: Cascade)
  size_id String @db.Uuid
  color Color @relation(fields: [color_id], references: [id], onDelete: Cascade)
  color_id String @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  productImage ProductImage[]
  sellOrderItem SellOrderItem[]
  @@map("product_variations")
}

model ProductImage {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url String
  is_active Boolean
  productVariation ProductVariation @relation(fields: [product_variation_id], references: [id], onDelete: Cascade)
  product_variation_id String @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("product_images")
}

model LedgerCategory {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String
  description String?
  is_active Boolean
  ledger Ledger[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

enum TransactionType {
  DEBIT
  CREDIT
}

model Ledger {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String
  is_paid Boolean
  due_date DateTime @db.Date
  transaction_type TransactionType
  amount Int
  note String?
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid
  ledgerCategory LedgerCategory @relation(fields: [ledger_category_id], references: [id], onDelete: Cascade)
  ledger_category_id String @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("ledger")
}

model SellOrder {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  note String?
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid
  total_price Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("sell_order")
}

model SellOrderItem {
  id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  productVariation ProductVariation @relation(fields: [product_variation_id], references: [id], onDelete: Cascade)
  product_variation_id String @db.Uuid
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  @@map("sell_order_items")
}